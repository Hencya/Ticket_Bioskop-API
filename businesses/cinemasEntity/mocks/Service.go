// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	addressesEntity "TiBO_API/businesses/addressesEntity"
	cinemasEntity "TiBO_API/businesses/cinemasEntity"

	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// CreateCinema provides a mock function with given fields: ctx, cinemaData, addressData
func (_m *Service) CreateCinema(ctx context.Context, cinemaData *cinemasEntity.Domain, addressData *addressesEntity.Domain) (*cinemasEntity.Domain, error) {
	ret := _m.Called(ctx, cinemaData, addressData)

	var r0 *cinemasEntity.Domain
	if rf, ok := ret.Get(0).(func(context.Context, *cinemasEntity.Domain, *addressesEntity.Domain) *cinemasEntity.Domain); ok {
		r0 = rf(ctx, cinemaData, addressData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cinemasEntity.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cinemasEntity.Domain, *addressesEntity.Domain) error); ok {
		r1 = rf(ctx, cinemaData, addressData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteBySlug provides a mock function with given fields: ctx, slug
func (_m *Service) DeleteBySlug(ctx context.Context, slug string) (string, error) {
	ret := _m.Called(ctx, slug)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, slug)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, slug)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByIP provides a mock function with given fields: ctx, ip
func (_m *Service) FindByIP(ctx context.Context, ip string) ([]cinemasEntity.Domain, error) {
	ret := _m.Called(ctx, ip)

	var r0 []cinemasEntity.Domain
	if rf, ok := ret.Get(0).(func(context.Context, string) []cinemasEntity.Domain); ok {
		r0 = rf(ctx, ip)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]cinemasEntity.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, ip)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByName provides a mock function with given fields: ctx, name
func (_m *Service) FindByName(ctx context.Context, name string) ([]cinemasEntity.Domain, error) {
	ret := _m.Called(ctx, name)

	var r0 []cinemasEntity.Domain
	if rf, ok := ret.Get(0).(func(context.Context, string) []cinemasEntity.Domain); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]cinemasEntity.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindBySlug provides a mock function with given fields: ctx, slug
func (_m *Service) FindBySlug(ctx context.Context, slug string) (cinemasEntity.Domain, error) {
	ret := _m.Called(ctx, slug)

	var r0 cinemasEntity.Domain
	if rf, ok := ret.Get(0).(func(context.Context, string) cinemasEntity.Domain); ok {
		r0 = rf(ctx, slug)
	} else {
		r0 = ret.Get(0).(cinemasEntity.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, slug)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCinema provides a mock function with given fields: ctx, cinemaData, addressData, slug
func (_m *Service) UpdateCinema(ctx context.Context, cinemaData *cinemasEntity.Domain, addressData *addressesEntity.Domain, slug string) (*cinemasEntity.Domain, error) {
	ret := _m.Called(ctx, cinemaData, addressData, slug)

	var r0 *cinemasEntity.Domain
	if rf, ok := ret.Get(0).(func(context.Context, *cinemasEntity.Domain, *addressesEntity.Domain, string) *cinemasEntity.Domain); ok {
		r0 = rf(ctx, cinemaData, addressData, slug)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cinemasEntity.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cinemasEntity.Domain, *addressesEntity.Domain, string) error); ok {
		r1 = rf(ctx, cinemaData, addressData, slug)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
