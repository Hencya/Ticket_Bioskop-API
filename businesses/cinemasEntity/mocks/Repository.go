// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	cinemasEntity "TiBO_API/businesses/cinemasEntity"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, slug
func (_m *Repository) Delete(ctx context.Context, slug string) (string, error) {
	ret := _m.Called(ctx, slug)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, slug)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, slug)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindStatusByTitle provides a mock function with given fields: ctx, title
func (_m *Repository) FindStatusByTitle(ctx context.Context, title string) (cinemasEntity.Domain, error) {
	ret := _m.Called(ctx, title)

	var r0 cinemasEntity.Domain
	if rf, ok := ret.Get(0).(func(context.Context, string) cinemasEntity.Domain); ok {
		r0 = rf(ctx, title)
	} else {
		r0 = ret.Get(0).(cinemasEntity.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, title)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByAddress provides a mock function with given fields: ctx, addressID
func (_m *Repository) GetByAddress(ctx context.Context, addressID []uint) ([]cinemasEntity.Domain, error) {
	ret := _m.Called(ctx, addressID)

	var r0 []cinemasEntity.Domain
	if rf, ok := ret.Get(0).(func(context.Context, []uint) []cinemasEntity.Domain); ok {
		r0 = rf(ctx, addressID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]cinemasEntity.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []uint) error); ok {
		r1 = rf(ctx, addressID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *Repository) GetByID(ctx context.Context, id uint) (cinemasEntity.Domain, error) {
	ret := _m.Called(ctx, id)

	var r0 cinemasEntity.Domain
	if rf, ok := ret.Get(0).(func(context.Context, uint) cinemasEntity.Domain); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(cinemasEntity.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByName provides a mock function with given fields: ctx, name
func (_m *Repository) GetByName(ctx context.Context, name string) ([]cinemasEntity.Domain, error) {
	ret := _m.Called(ctx, name)

	var r0 []cinemasEntity.Domain
	if rf, ok := ret.Get(0).(func(context.Context, string) []cinemasEntity.Domain); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]cinemasEntity.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBySlug provides a mock function with given fields: ctx, slug
func (_m *Repository) GetBySlug(ctx context.Context, slug string) (cinemasEntity.Domain, error) {
	ret := _m.Called(ctx, slug)

	var r0 cinemasEntity.Domain
	if rf, ok := ret.Get(0).(func(context.Context, string) cinemasEntity.Domain); ok {
		r0 = rf(ctx, slug)
	} else {
		r0 = ret.Get(0).(cinemasEntity.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, slug)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostNewCinema provides a mock function with given fields: ctx, cinemaDomain
func (_m *Repository) PostNewCinema(ctx context.Context, cinemaDomain *cinemasEntity.Domain) (cinemasEntity.Domain, error) {
	ret := _m.Called(ctx, cinemaDomain)

	var r0 cinemasEntity.Domain
	if rf, ok := ret.Get(0).(func(context.Context, *cinemasEntity.Domain) cinemasEntity.Domain); ok {
		r0 = rf(ctx, cinemaDomain)
	} else {
		r0 = ret.Get(0).(cinemasEntity.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cinemasEntity.Domain) error); ok {
		r1 = rf(ctx, cinemaDomain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, slugID, cinemaDomain
func (_m *Repository) Update(ctx context.Context, slugID string, cinemaDomain *cinemasEntity.Domain) (cinemasEntity.Domain, error) {
	ret := _m.Called(ctx, slugID, cinemaDomain)

	var r0 cinemasEntity.Domain
	if rf, ok := ret.Get(0).(func(context.Context, string, *cinemasEntity.Domain) cinemasEntity.Domain); ok {
		r0 = rf(ctx, slugID, cinemaDomain)
	} else {
		r0 = ret.Get(0).(cinemasEntity.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *cinemasEntity.Domain) error); ok {
		r1 = rf(ctx, slugID, cinemaDomain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
