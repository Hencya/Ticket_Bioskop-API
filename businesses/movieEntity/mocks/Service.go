// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	moviesEntity "TiBO_API/businesses/movieEntity"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// CreateMovie provides a mock function with given fields: ctx, movieDomain, slug
func (_m *Service) CreateMovie(ctx context.Context, movieDomain *moviesEntity.Domain, slug string) (*moviesEntity.Domain, error) {
	ret := _m.Called(ctx, movieDomain, slug)

	var r0 *moviesEntity.Domain
	if rf, ok := ret.Get(0).(func(context.Context, *moviesEntity.Domain, string) *moviesEntity.Domain); ok {
		r0 = rf(ctx, movieDomain, slug)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*moviesEntity.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *moviesEntity.Domain, string) error); ok {
		r1 = rf(ctx, movieDomain, slug)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteBySlug provides a mock function with given fields: ctx, slug
func (_m *Service) DeleteBySlug(ctx context.Context, slug string) (string, error) {
	ret := _m.Called(ctx, slug)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, slug)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, slug)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindBySlug provides a mock function with given fields: ctx, slug
func (_m *Service) FindBySlug(ctx context.Context, slug string) (moviesEntity.Domain, error) {
	ret := _m.Called(ctx, slug)

	var r0 moviesEntity.Domain
	if rf, ok := ret.Get(0).(func(context.Context, string) moviesEntity.Domain); ok {
		r0 = rf(ctx, slug)
	} else {
		r0 = ret.Get(0).(moviesEntity.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, slug)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByTitle provides a mock function with given fields: ctx, title
func (_m *Service) FindByTitle(ctx context.Context, title string) ([]moviesEntity.Domain, error) {
	ret := _m.Called(ctx, title)

	var r0 []moviesEntity.Domain
	if rf, ok := ret.Get(0).(func(context.Context, string) []moviesEntity.Domain); ok {
		r0 = rf(ctx, title)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]moviesEntity.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, title)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateMovie provides a mock function with given fields: ctx, movieDomain, slugCinema, slugMovie
func (_m *Service) UpdateMovie(ctx context.Context, movieDomain *moviesEntity.Domain, slugCinema string, slugMovie string) (*moviesEntity.Domain, error) {
	ret := _m.Called(ctx, movieDomain, slugCinema, slugMovie)

	var r0 *moviesEntity.Domain
	if rf, ok := ret.Get(0).(func(context.Context, *moviesEntity.Domain, string, string) *moviesEntity.Domain); ok {
		r0 = rf(ctx, movieDomain, slugCinema, slugMovie)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*moviesEntity.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *moviesEntity.Domain, string, string) error); ok {
		r1 = rf(ctx, movieDomain, slugCinema, slugMovie)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UploadPoster provides a mock function with given fields: ctx, slug, fileLocation
func (_m *Service) UploadPoster(ctx context.Context, slug string, fileLocation string) (*moviesEntity.Domain, error) {
	ret := _m.Called(ctx, slug, fileLocation)

	var r0 *moviesEntity.Domain
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *moviesEntity.Domain); ok {
		r0 = rf(ctx, slug, fileLocation)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*moviesEntity.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, slug, fileLocation)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
