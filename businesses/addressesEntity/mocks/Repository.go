// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	addressesEntity "TiBO_API/businesses/addressesEntity"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// FindByCity provides a mock function with given fields: city
func (_m *Repository) FindByCity(city string) ([]addressesEntity.Domain, error) {
	ret := _m.Called(city)

	var r0 []addressesEntity.Domain
	if rf, ok := ret.Get(0).(func(string) []addressesEntity.Domain); ok {
		r0 = rf(city)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]addressesEntity.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(city)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: id
func (_m *Repository) FindByID(id uint) (addressesEntity.Domain, error) {
	ret := _m.Called(id)

	var r0 addressesEntity.Domain
	if rf, ok := ret.Get(0).(func(uint) addressesEntity.Domain); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(addressesEntity.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: address
func (_m *Repository) Insert(address *addressesEntity.Domain) (addressesEntity.Domain, error) {
	ret := _m.Called(address)

	var r0 addressesEntity.Domain
	if rf, ok := ret.Get(0).(func(*addressesEntity.Domain) addressesEntity.Domain); ok {
		r0 = rf(address)
	} else {
		r0 = ret.Get(0).(addressesEntity.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*addressesEntity.Domain) error); ok {
		r1 = rf(address)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
