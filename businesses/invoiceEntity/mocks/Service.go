// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	invoiceEntity "TiBO_API/businesses/invoiceEntity"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, userId, invoiceData
func (_m *Service) Create(ctx context.Context, userId string, invoiceData *invoiceEntity.Domain) (*invoiceEntity.Domain, error) {
	ret := _m.Called(ctx, userId, invoiceData)

	var r0 *invoiceEntity.Domain
	if rf, ok := ret.Get(0).(func(context.Context, string, *invoiceEntity.Domain) *invoiceEntity.Domain); ok {
		r0 = rf(ctx, userId, invoiceData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*invoiceEntity.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *invoiceEntity.Domain) error); ok {
		r1 = rf(ctx, userId, invoiceData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByUserID provides a mock function with given fields: ctx, userId
func (_m *Service) GetByUserID(ctx context.Context, userId string) ([]invoiceEntity.Domain, error) {
	ret := _m.Called(ctx, userId)

	var r0 []invoiceEntity.Domain
	if rf, ok := ret.Get(0).(func(context.Context, string) []invoiceEntity.Domain); ok {
		r0 = rf(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]invoiceEntity.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
