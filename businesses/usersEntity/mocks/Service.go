// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"

	echo "github.com/labstack/echo/v4"
	mock "github.com/stretchr/testify/mock"

	usersEntity "TiBO_API/businesses/usersEntity"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// DeleteUser provides a mock function with given fields: ctx, id
func (_m *Service) DeleteUser(ctx context.Context, id string) (string, error) {
	ret := _m.Called(ctx, id)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByUuid provides a mock function with given fields: ctx, uuid
func (_m *Service) FindByUuid(ctx context.Context, uuid string) (usersEntity.Domain, error) {
	ret := _m.Called(ctx, uuid)

	var r0 usersEntity.Domain
	if rf, ok := ret.Get(0).(func(context.Context, string) usersEntity.Domain); ok {
		r0 = rf(ctx, uuid)
	} else {
		r0 = ret.Get(0).(usersEntity.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, uuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: ctx, email, password
func (_m *Service) Login(ctx context.Context, email string, password string) (string, error) {
	ret := _m.Called(ctx, email, password)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, email, password)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, email, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Logout provides a mock function with given fields: ctx
func (_m *Service) Logout(ctx echo.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Register provides a mock function with given fields: ctx, data
func (_m *Service) Register(ctx context.Context, data *usersEntity.Domain) (*usersEntity.Domain, error) {
	ret := _m.Called(ctx, data)

	var r0 *usersEntity.Domain
	if rf, ok := ret.Get(0).(func(context.Context, *usersEntity.Domain) *usersEntity.Domain); ok {
		r0 = rf(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*usersEntity.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *usersEntity.Domain) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateById provides a mock function with given fields: ctx, data, id
func (_m *Service) UpdateById(ctx context.Context, data *usersEntity.Domain, id string) (*usersEntity.Domain, error) {
	ret := _m.Called(ctx, data, id)

	var r0 *usersEntity.Domain
	if rf, ok := ret.Get(0).(func(context.Context, *usersEntity.Domain, string) *usersEntity.Domain); ok {
		r0 = rf(ctx, data, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*usersEntity.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *usersEntity.Domain, string) error); ok {
		r1 = rf(ctx, data, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UploadAvatar provides a mock function with given fields: ctx, id, fileLocation
func (_m *Service) UploadAvatar(ctx context.Context, id string, fileLocation string) (*usersEntity.Domain, error) {
	ret := _m.Called(ctx, id, fileLocation)

	var r0 *usersEntity.Domain
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *usersEntity.Domain); ok {
		r0 = rf(ctx, id, fileLocation)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*usersEntity.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, id, fileLocation)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
